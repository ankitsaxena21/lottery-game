{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","async","preventDefault","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","location","reload","onClick","pickWinner","call","getPlayers","getBalance","options","address","this","className","align","role","style","maxWidth","Header","as","textAlign","block","length","fromWei","Form","Field","Label","color","size","width","Input","fluid","placeholder","label","labelPosition","onChange","target","Button","primary","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gcAEeA,EADF,I,OAAIC,GAAKC,OAAOF,KAAKG,iBCEnB,MAAIH,EAAKI,IAAIC,SADjB,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,UAAU,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,aAAa,QAAU,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,aAAa,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,cAAc,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAM,OAAS,GAAG,KAAO,QAAQ,QAAU,GAAG,SAAU,EAAK,gBAAkB,UAAU,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,KAAO,UAAU,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,YAAY,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,SAAU,EAAM,gBAAkB,aAAa,KAAO,gBADlxB,8C,qDCyGDC,E,2MAlGbC,MAAQ,CACNC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,MAAO,GACPC,QAAS,I,EAWXC,SAAW,SAAOC,GAAP,eAAAC,EAAAC,OAAA,uDACTF,EAAMG,iBADG,WAAAF,EAAA,MAGcf,EAAKI,IAAIc,eAHvB,cAGHC,EAHG,OAKT,EAAKC,SAAS,CAAER,QAAS,sCALhB,WAAAG,EAAA,MAOHM,EAAQC,QAAQC,QAAQC,KAAK,CACjCC,KAAMN,EAAS,GACfR,MAAOX,EAAK0B,MAAMC,MAAM,EAAKpB,MAAMI,MAAO,YATnC,OAYT,EAAKS,SAAS,CAAER,QAAS,2BACzBV,OAAO0B,SAASC,QAAO,GAbd,sC,EAgBXC,QAAU,0BAAAf,EAAAC,OAAA,kEAAAD,EAAA,MACef,EAAKI,IAAIc,eADxB,cACFC,EADE,OAGR,EAAKC,SAAS,CAAER,QAAS,sCAHjB,WAAAG,EAAA,MAKFM,EAAQC,QAAQS,aAAaP,KAAK,CACtCC,KAAMN,EAAS,MANT,OASR,EAAKC,SAAS,CAAER,QAAS,6BATjB,sC,yLAvBgBS,EAAQC,QAAQd,UAAUwB,Q,cAA1CxB,E,0BACgBa,EAAQC,QAAQW,aAAaD,Q,cAA7CvB,E,0BACgBT,EAAKI,IAAI8B,WAAWb,EAAQc,QAAQC,U,OAApD1B,E,OAEN2B,KAAKjB,SAAS,CAAEZ,UAASC,UAASC,Y,iFA+B5B,IAAD,OACP,OACE,yBAAK4B,UAAU,uBAAuBC,MAAM,UAC5C,yBAAKD,UAAU,OACf,0BAAME,KAAK,OAAOF,UAAU,4BAA4BG,MAAO,CAAEC,SAAU,UAC3E,yBAAKJ,UAAU,2BACf,kBAACK,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAASC,OAAK,GAAxC,gBAGE,kBAACH,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAASC,OAAK,GAAxC,+BACgCT,KAAK9B,MAAMC,QAD3C,IACqD,6BADrD,uBAEwB6B,KAAK9B,MAAME,QAAQsC,OAF3C,oCAGqB/C,EAAK0B,MAAMsB,QAAQX,KAAK9B,MAAMG,QAAS,UAG5D,kBAACuC,EAAA,EAAD,CAAMpC,SAAUwB,KAAKxB,UACrB,kBAACoC,EAAA,EAAKC,MAAN,KACA,+BACA,wBAAIX,MAAM,UAAV,KAAqB,kBAACY,EAAA,EAAD,CAAOP,GAAG,IAAIQ,MAAM,QAAQC,KAAK,OAAjC,iBAA4D,6BAAM,8BACvF,4BACA,wBAAIC,MAAM,SACR,kBAACC,EAAA,EAAD,CACAC,OAAK,EACLC,YAAY,mBACZJ,KAAK,QACLK,MAAM,YACNC,cAAc,OACdhD,MAAO0B,KAAK9B,MAAMI,MAClBiD,SAAU,SAAA9C,GAAK,OAAI,EAAKM,SAAS,CAAET,MAAOG,EAAM+C,OAAOlD,YAGtD,4BACA,kBAACmD,EAAA,EAAD,CAAQC,SAAO,EAACV,KAAK,SAArB,cAMH,4BAAKhB,KAAK9B,MAAMK,SAChB,kBAACuC,EAAA,EAAD,CAAOP,GAAG,IAAIS,KAAK,WAAnB,0BAGA,6BACA,6BACA,kBAACS,EAAA,EAAD,CAAQC,SAAO,EAACV,KAAK,MAAMvB,QAASO,KAAKP,SAAzC,0B,GAzFUkC,aCKEC,QACW,cAA7B/D,OAAO0B,SAASsC,UAEe,UAA7BhE,OAAO0B,SAASsC,UAEhBhE,OAAO0B,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.450db6e1.chunk.js","sourcesContent":["import Web3 from 'web3';\nconst web3 = new Web3(window.web3.currentProvider);\nexport default web3;\n","import web3 from './web3';\nconst address = '0x66341246c655487F5687946Ab32Ef9b72b2c6d8E';\nconst abi =[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\nexport default new web3.eth.Contract(abi,address);\n","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Form, Label, Button, Header, Input } from 'semantic-ui-react';\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  }\n\n  async componentDidMount() {\n      const manager = await lottery.methods.manager().call();\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n\n      this.setState({ manager, players, balance });\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({ message: 'You have been entered!' });\n    window.location.reload(true)\n  };\n\n  onClick = async () => {\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n\n    this.setState({ message: 'A winner has been picked' });\n  };\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-7\" align=\"center\">\n      <div className=\"row\">\n      <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '980px' }}>\n      <div className=\"content mr-auto ml-auto\">\n      <Header as='h2' textAlign='center' block>\n        Lottery Game\n        </Header>\n        <Header as='h3' textAlign='center' block>\n          This contract is managed by { this.state.manager } <br/>\n          There are currently { this.state.players.length } people entered\n          competing to win { web3.utils.fromWei(this.state.balance, 'ether') }\n         </Header>\n\n        <Form onSubmit={this.onSubmit}>\n        <Form.Field>\n        <table>\n        <tr align=\"center\">  <Label as='a' color='olive' size=\"big\">Try your luck</Label><br /><br /></tr>\n        <tr>\n        <th width=\"700px\">\n          <Input\n          fluid\n          placeholder=\"Enter the amount\"\n          size=\"large\"\n          label=\"My amount\"\n          labelPosition=\"left\"\n          value={this.state.value}\n          onChange={event => this.setState({ value: event.target.value })}\n           />\n           </th>\n           <th>\n           <Button primary size=\"large\">Enter</Button>\n           </th>\n           </tr>\n           </table>\n        </Form.Field>\n        </Form>\n        <h1>{this.state.message}</h1>\n        <Label as='a' size=\"massive\">\n        Ready to pick a winner\n        </Label>\n        <br/>\n        <br />\n        <Button primary size=\"big\" onClick={this.onClick}>Pick a Winner!</Button>\n\n      </div>\n      </main>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}